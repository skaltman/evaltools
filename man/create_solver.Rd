% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/solver-factory.R
\name{create_solver}
\alias{create_solver}
\title{Create a solver function for tool-based evaluations}
\usage{
create_solver(
  system_prompt = NULL,
  prompt_field = "prompt",
  setup_field = "setup",
  teardown_field = "teardown",
  tool_factory_field = "tool_factory",
  tool_alias_field = "tool_alias",
  sleep_time = 15,
  env_parent = .GlobalEnv
)
}
\arguments{
\item{system_prompt}{Optional character string with a system prompt to add
to the chat before solving each sample. Default is NULL (no system prompt).}

\item{prompt_field}{Character string naming the field in input that contains
the task prompt. Default is "prompt".}

\item{setup_field}{Character string naming the field in input that contains
setup code. Default is "setup".}

\item{teardown_field}{Character string naming the field in input that contains
teardown code. Default is "teardown".}

\item{tool_factory_field}{Character string naming the field in input that
specifies the tool factory function. Default is "tool_factory".}

\item{tool_alias_field}{Character string naming the field in input that
specifies the tool alias. Default is "tool_alias".}

\item{sleep_time}{Numeric value specifying seconds to sleep between samples.
Default is 15.}

\item{env_parent}{Environment to use as parent for execution environments.
Default is .GlobalEnv.}
}
\value{
A function with signature \code{function(inputs, ..., solver_chat)}
that can be used as a solver in vitals::Task. Returns a list with:
\describe{
\item{result}{Character vector of model responses}
\item{solver_chat}{List of Chat objects used to generate responses}
}
}
\description{
Creates a solver function that executes setup code, registers tools,
prompts the model, and collects responses. The solver follows the pattern
expected by vitals::Task and supports per-sample tool specification with
aliasing.
}
\examples{
\dontrun{
# Create a basic solver
solver <- create_solver()

# Create solver with system prompt
solver <- create_solver(
  system_prompt = "You are an expert data analyst."
)

# Create solver with custom field names
solver <- create_solver(
  prompt_field = "task_prompt",
  setup_field = "init_code",
  tool_factory_field = "tool_name"
)
}
}
