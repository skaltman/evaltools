% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tool-factory.R
\name{instantiate_tool}
\alias{instantiate_tool}
\title{Instantiate a tool from a factory function}
\usage{
instantiate_tool(factory_name, env, alias = NULL)
}
\arguments{
\item{factory_name}{Character string naming the factory function to call.
The function should follow the convention of accepting \code{env} and
optionally \code{name} parameters.}

\item{env}{Environment in which the tool's code will execute.}

\item{alias}{Optional character string to use as the tool's name instead
of the factory's default. If the factory function accepts a \code{name}
parameter, this will be passed to it.}
}
\value{
An ellmer tool object returned by the factory function.
}
\description{
Creates a tool by calling a factory function with optional name aliasing.
The factory function should accept at minimum an \code{env} parameter for the
execution environment, and optionally a \code{name} parameter for aliasing.
}
\details{
Tool factory functions should follow this signature:
\code{tool_factory(env, name = NULL)}

If \code{name} is NULL, the factory should use its default name.
If \code{name} is provided, it should create the tool with that name.
}
\examples{
\dontrun{
# Define a tool factory
tool_create_plot <- function(env, name = "create_plot") {
  ellmer::tool(
    function(code) run_code(code, env),
    name = name,
    description = "Create a plot from R code"
  )
}

# Instantiate with default name
tool1 <- instantiate_tool("tool_create_plot", new.env())

# Instantiate with alias
tool2 <- instantiate_tool("tool_create_plot", new.env(), alias = "make_plot")
}
}
